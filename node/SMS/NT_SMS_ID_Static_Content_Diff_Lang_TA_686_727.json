{
	"info": {
		"_postman_id": "ea61a1c5-060c-4780-a429-47982747dbce",
		"name": "NT_SMS_ID_Static_Content_Diff_Lang_TA_686_727",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6765444",
		"_collection_link": "https://ongageqa.postman.co/workspace/AT-SMS~91e83416-2269-42d0-be32-66c40d50eb55/collection/6765444-ea61a1c5-060c-4780-a429-47982747dbce?action=share&creator=6765444&source=collection_link"
	},
	"item": [
		{
			"name": "Create and Send Campaign",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X_USERNAME",
						"value": "{{username}}",
						"type": "text"
					},
					{
						"key": "X_PASSWORD",
						"value": "{{password}}",
						"type": "text"
					},
					{
						"key": "X_ACCOUNT_CODE",
						"value": "{{account_code}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"recipients\": [\"at_sms_math_evaluation@hoohem.com\"],\n  \"email_message_id\": \"{{nt_sms_id_cnt_send_static_cnt}}\",\n  \"mailing_id\": \"{{transactional_cid_sms}}\",\n  \"distribution\": [\n   {\n    \"esp_connection_id\": {{sms_connectionId}},\n    \"domain\": \"default\"\n   }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_domain}}/{{list_id}}/api/notify_transactions",
					"host": [
						"{{api_domain}}"
					],
					"path": [
						"{{list_id}}",
						"api",
						"notify_transactions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read sms",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(pm.response.code === 200){",
							"  var jsonData = pm.response.json()",
							"  var smsText = jsonData.Body;",
							"  if(pm.environment.get(\"env\") === \"dev\"){",
							"  smsText = smsText.split('!$!')",
							"  var smsDiffLang = JSON.parse(smsText[2])",
							"  pm.test(`Test Notify Transactional SmsId Static Content SMS with esp id is working \"Time : ${jsonData.timestamp}`, function () {",
							"    pm.expect(smsText[1]).to.equal(\"Notify Transactional Sms Id Static Content\");",
							"  })",
							"  pm.test(`Test Notify Transactional Diff language Hebrew is working \"Time : ${jsonData.timestamp}`, function () {",
							"    pm.expect(smsDiffLang.hebrew).to.equal(\"שלום סטפין\");",
							"  })",
							"  pm.test(`Test Notify Transactional Diff language Danish is working \"Time : ${jsonData.timestamp}`, function () {",
							"    pm.expect(smsDiffLang.danish).to.equal(\"Hej Stepin\");",
							"  })",
							"   pm.test(`Test Notify Transactional Diff language English is working \"Time : ${jsonData.timestamp}`, function () {",
							"    pm.expect(smsDiffLang.english).to.equal(\"Hello Stepin\");",
							"  })",
							"  pm.test(`Test Notify Transactional Diff language Greek is working \"Time : ${jsonData.timestamp}`, function () {",
							"    pm.expect(smsDiffLang.greek).to.equal(\"Γεια σου Στέπιν\");",
							"  })",
							"  pm.test(`Test Notify Transactional Diff language Japanese is working \"Time : ${jsonData.timestamp}`, function () {",
							"    pm.expect(smsDiffLang.japanese).to.equal(\"こんにちは、ステピン\");",
							"  })",
							"  pm.test(`Test Notify Transactional Diff language Russian is working \"Time : ${jsonData.timestamp}`, function () {",
							"    pm.expect(smsDiffLang.russian).to.equal(\"Привет степин\");",
							"  })",
							"  }else{",
							"     smsText = smsText.split('!~!')",
							"  var smsDiffLang = JSON.parse(smsText[2])",
							"  pm.test(`Test Notify Transactional SmsId Static Content SMS with esp id is working \"Time : ${jsonData.timestamp}`, function () {",
							"    pm.expect(smsText[1]).to.equal(\"Notify Transactional Sms Id Static Content\");",
							"  })",
							"  pm.test(`Test Notify Transactional Diff language Hebrew is working \"Time : ${jsonData.timestamp}`, function () {",
							"    pm.expect(smsDiffLang.hebrew).to.equal(\"שלום סטפין\");",
							"  })",
							"  pm.test(`Test Notify Transactional Diff language Danish is working \"Time : ${jsonData.timestamp}`, function () {",
							"    pm.expect(smsDiffLang.danish).to.equal(\"Hej Stepin\");",
							"  })",
							"   pm.test(`Test Notify Transactional Diff language English is working \"Time : ${jsonData.timestamp}`, function () {",
							"    pm.expect(smsDiffLang.english).to.equal(\"Hello Stepin\");",
							"  })",
							"  pm.test(`Test Notify Transactional Diff language Greek is working \"Time : ${jsonData.timestamp}`, function () {",
							"    pm.expect(smsDiffLang.greek).to.equal(\"Γεια σου Στέπιν\");",
							"  })",
							"  pm.test(`Test Notify Transactional Diff language Japanese is working \"Time : ${jsonData.timestamp}`, function () {",
							"    pm.expect(smsDiffLang.japanese).to.equal(\"こんにちは、ステピン\");",
							"  })",
							"  pm.test(`Test Notify Transactional Diff language Russian is working \"Time : ${jsonData.timestamp}`, function () {",
							"    pm.expect(smsDiffLang.russian).to.equal(\"Привет степин\");",
							"  }) ",
							"  }",
							"}else{",
							"  pm.test(`Test Notify Transactional SmsId Static Content SMS not received`, function () {",
							"    pm.expect(\"\").to.equal(\"Notify Transactional Sms Id Static Content\");",
							"  })",
							"",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X_USERNAME",
						"value": "{{username}}",
						"type": "text"
					},
					{
						"key": "X_PASSWORD",
						"value": "{{password}}",
						"type": "text"
					},
					{
						"key": "X_ACCOUNT_CODE",
						"value": "{{account_code}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"to_number\": \"{{twillio_number_1}}\",\n    \"unique_id\": \"nt_cnt_smsid_static_cnt_{{sms_connectionId}}\",\n    \"timeout\": 600000\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://app.ongageqa.site/sms_db/get_last",
					"protocol": "http",
					"host": [
						"app",
						"ongageqa",
						"site"
					],
					"path": [
						"sms_db",
						"get_last"
					]
				}
			},
			"response": []
		}
	]
}